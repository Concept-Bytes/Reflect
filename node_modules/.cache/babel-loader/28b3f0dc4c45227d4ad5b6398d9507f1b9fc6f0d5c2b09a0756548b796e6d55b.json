{"ast":null,"code":"// Global settings API that works across all browsers and devices\nclass GlobalSettingsAPI {\n  constructor() {\n    this.ws = null;\n    this.reconnectInterval = null;\n    this.isConnected = false;\n    this.pendingUpdates = new Map();\n    this.listeners = new Set();\n    this.localCache = {};\n    this.init();\n  }\n  init() {\n    this.loadFromServer();\n    this.connect();\n\n    // Sync with localStorage for compatibility\n    this.syncWithLocalStorage();\n  }\n  async loadFromServer() {\n    try {\n      const hostIP = window.location.hostname;\n      const response = await fetch(`http://${hostIP}:8889/settings`);\n      if (response.ok) {\n        const settings = await response.json();\n        this.localCache = settings;\n        this.updateLocalStorage(settings);\n        this.notifyListeners();\n        console.log('Loaded global settings from server');\n      }\n    } catch (e) {\n      console.log('Failed to load settings from server, using localStorage');\n      this.loadFromLocalStorage();\n    }\n  }\n  loadFromLocalStorage() {\n    const keys = Object.keys(localStorage);\n    const settings = {};\n    keys.forEach(key => {\n      try {\n        settings[key] = localStorage.getItem(key);\n      } catch (e) {\n        // ignore\n      }\n    });\n    this.localCache = settings;\n  }\n  updateLocalStorage(settings) {\n    // Clear localStorage first\n    localStorage.clear();\n\n    // Set all global settings\n    Object.entries(settings).forEach(([key, value]) => {\n      if (value !== null && value !== undefined) {\n        localStorage.setItem(key, value);\n      }\n    });\n  }\n  syncWithLocalStorage() {\n    // Listen for direct localStorage changes and sync to server\n    window.addEventListener('storage', e => {\n      if (!e.key) return; // ignore clear events\n      this.updateSetting(e.key, e.newValue);\n    });\n\n    // Override localStorage methods to capture direct calls\n    const originalSetItem = localStorage.setItem.bind(localStorage);\n    const originalRemoveItem = localStorage.removeItem.bind(localStorage);\n    localStorage.setItem = (key, value) => {\n      originalSetItem(key, value);\n      this.updateSetting(key, value);\n    };\n    localStorage.removeItem = key => {\n      originalRemoveItem(key);\n      this.updateSetting(key, null);\n    };\n  }\n  connect() {\n    try {\n      const hostIP = window.location.hostname;\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n\n      // Try same-origin first, then direct port\n      const sameOriginUrl = `${protocol}://${window.location.host}/settings-sync`;\n      const directUrl = `${protocol}://${hostIP}:8889`;\n      let tried = 0;\n      const tryConnect = url => {\n        this.ws = new WebSocket(url);\n        this.ws.onopen = () => {\n          console.log('Connected to global settings server:', url);\n          this.isConnected = true;\n          if (this.reconnectInterval) {\n            clearInterval(this.reconnectInterval);\n            this.reconnectInterval = null;\n          }\n          this.processPendingUpdates();\n        };\n        this.ws.onmessage = event => {\n          try {\n            const data = JSON.parse(event.data);\n            if (data.type === 'settings_update') {\n              this.localCache = data.settings;\n              this.updateLocalStorage(data.settings);\n              this.notifyListeners();\n            }\n          } catch (e) {\n            console.error('Invalid WebSocket message:', e);\n          }\n        };\n        this.ws.onclose = () => {\n          console.log('Global settings connection closed');\n          this.isConnected = false;\n          this.reconnect();\n        };\n        this.ws.onerror = error => {\n          console.log('WebSocket error, trying next URL...');\n          tried++;\n          if (tried === 1) {\n            tryConnect(directUrl);\n          } else {\n            this.reconnect();\n          }\n        };\n      };\n      tryConnect(sameOriginUrl);\n    } catch (error) {\n      console.log('Failed to connect to settings server:', error);\n      this.reconnect();\n    }\n  }\n  reconnect() {\n    if (!this.reconnectInterval) {\n      this.reconnectInterval = setInterval(() => {\n        this.connect();\n      }, 5000);\n    }\n  }\n  async updateSetting(key, value) {\n    // Update local cache immediately\n    if (value === null) {\n      delete this.localCache[key];\n    } else {\n      this.localCache[key] = value;\n    }\n\n    // Try WebSocket first\n    if (this.isConnected && this.ws && this.ws.readyState === WebSocket.OPEN) {\n      try {\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key: key,\n          newValue: value\n        }));\n        return;\n      } catch (e) {\n        console.log('WebSocket send failed, using HTTP');\n      }\n    }\n\n    // Fallback to HTTP\n    this.pendingUpdates.set(key, value);\n    this.processPendingUpdates();\n  }\n  async processPendingUpdates() {\n    if (this.pendingUpdates.size === 0) return;\n    try {\n      const updates = Object.fromEntries(this.pendingUpdates);\n      const hostIP = window.location.hostname;\n      const response = await fetch(`http://${hostIP}:8889/settings`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (response.ok) {\n        this.pendingUpdates.clear();\n      }\n    } catch (e) {\n      console.log('Failed to sync pending updates:', e);\n    }\n  }\n  addListener(callback) {\n    this.listeners.add(callback);\n  }\n  removeListener(callback) {\n    this.listeners.delete(callback);\n  }\n  notifyListeners() {\n    this.listeners.forEach(callback => {\n      try {\n        callback(this.localCache);\n      } catch (e) {\n        console.error('Listener error:', e);\n      }\n    });\n  }\n  getSetting(key) {\n    return this.localCache[key] || localStorage.getItem(key);\n  }\n  getAllSettings() {\n    return {\n      ...this.localCache\n    };\n  }\n}\n\n// Export singleton\nexport const globalSettings = new GlobalSettingsAPI();\n\n// Compatibility layer - override localStorage for seamless integration\nwindow.addEventListener('load', () => {\n  // Make sure all components use the global settings\n  globalSettings.addListener(() => {\n    // Dispatch storage events for existing components\n    window.dispatchEvent(new Event('storage'));\n  });\n});","map":{"version":3,"names":["GlobalSettingsAPI","constructor","ws","reconnectInterval","isConnected","pendingUpdates","Map","listeners","Set","localCache","init","loadFromServer","connect","syncWithLocalStorage","hostIP","window","location","hostname","response","fetch","ok","settings","json","updateLocalStorage","notifyListeners","console","log","e","loadFromLocalStorage","keys","Object","localStorage","forEach","key","getItem","clear","entries","value","undefined","setItem","addEventListener","updateSetting","newValue","originalSetItem","bind","originalRemoveItem","removeItem","protocol","sameOriginUrl","host","directUrl","tried","tryConnect","url","WebSocket","onopen","clearInterval","processPendingUpdates","onmessage","event","data","JSON","parse","type","error","onclose","reconnect","onerror","setInterval","readyState","OPEN","send","stringify","set","size","updates","fromEntries","method","headers","body","addListener","callback","add","removeListener","delete","getSetting","getAllSettings","globalSettings","dispatchEvent","Event"],"sources":["C:/Users/Kcoda/Desktop/Projects/Reflect/src/utils/globalSettings.js"],"sourcesContent":["// Global settings API that works across all browsers and devices\r\nclass GlobalSettingsAPI {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.reconnectInterval = null;\r\n    this.isConnected = false;\r\n    this.pendingUpdates = new Map();\r\n    this.listeners = new Set();\r\n    this.localCache = {};\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.loadFromServer();\r\n    this.connect();\r\n    \r\n    // Sync with localStorage for compatibility\r\n    this.syncWithLocalStorage();\r\n  }\r\n\r\n  async loadFromServer() {\r\n    try {\r\n      const hostIP = window.location.hostname;\r\n      const response = await fetch(`http://${hostIP}:8889/settings`);\r\n      if (response.ok) {\r\n        const settings = await response.json();\r\n        this.localCache = settings;\r\n        this.updateLocalStorage(settings);\r\n        this.notifyListeners();\r\n        console.log('Loaded global settings from server');\r\n      }\r\n    } catch (e) {\r\n      console.log('Failed to load settings from server, using localStorage');\r\n      this.loadFromLocalStorage();\r\n    }\r\n  }\r\n\r\n  loadFromLocalStorage() {\r\n    const keys = Object.keys(localStorage);\r\n    const settings = {};\r\n    keys.forEach(key => {\r\n      try {\r\n        settings[key] = localStorage.getItem(key);\r\n      } catch (e) {\r\n        // ignore\r\n      }\r\n    });\r\n    this.localCache = settings;\r\n  }\r\n\r\n  updateLocalStorage(settings) {\r\n    // Clear localStorage first\r\n    localStorage.clear();\r\n    \r\n    // Set all global settings\r\n    Object.entries(settings).forEach(([key, value]) => {\r\n      if (value !== null && value !== undefined) {\r\n        localStorage.setItem(key, value);\r\n      }\r\n    });\r\n  }\r\n\r\n  syncWithLocalStorage() {\r\n    // Listen for direct localStorage changes and sync to server\r\n    window.addEventListener('storage', (e) => {\r\n      if (!e.key) return; // ignore clear events\r\n      this.updateSetting(e.key, e.newValue);\r\n    });\r\n\r\n    // Override localStorage methods to capture direct calls\r\n    const originalSetItem = localStorage.setItem.bind(localStorage);\r\n    const originalRemoveItem = localStorage.removeItem.bind(localStorage);\r\n\r\n    localStorage.setItem = (key, value) => {\r\n      originalSetItem(key, value);\r\n      this.updateSetting(key, value);\r\n    };\r\n\r\n    localStorage.removeItem = (key) => {\r\n      originalRemoveItem(key);\r\n      this.updateSetting(key, null);\r\n    };\r\n  }\r\n\r\n  connect() {\r\n    try {\r\n      const hostIP = window.location.hostname;\r\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n      \r\n      // Try same-origin first, then direct port\r\n      const sameOriginUrl = `${protocol}://${window.location.host}/settings-sync`;\r\n      const directUrl = `${protocol}://${hostIP}:8889`;\r\n      \r\n      let tried = 0;\r\n      const tryConnect = (url) => {\r\n        this.ws = new WebSocket(url);\r\n        \r\n        this.ws.onopen = () => {\r\n          console.log('Connected to global settings server:', url);\r\n          this.isConnected = true;\r\n          if (this.reconnectInterval) {\r\n            clearInterval(this.reconnectInterval);\r\n            this.reconnectInterval = null;\r\n          }\r\n          this.processPendingUpdates();\r\n        };\r\n\r\n        this.ws.onmessage = (event) => {\r\n          try {\r\n            const data = JSON.parse(event.data);\r\n            if (data.type === 'settings_update') {\r\n              this.localCache = data.settings;\r\n              this.updateLocalStorage(data.settings);\r\n              this.notifyListeners();\r\n            }\r\n          } catch (e) {\r\n            console.error('Invalid WebSocket message:', e);\r\n          }\r\n        };\r\n\r\n        this.ws.onclose = () => {\r\n          console.log('Global settings connection closed');\r\n          this.isConnected = false;\r\n          this.reconnect();\r\n        };\r\n\r\n        this.ws.onerror = (error) => {\r\n          console.log('WebSocket error, trying next URL...');\r\n          tried++;\r\n          if (tried === 1) {\r\n            tryConnect(directUrl);\r\n          } else {\r\n            this.reconnect();\r\n          }\r\n        };\r\n      };\r\n\r\n      tryConnect(sameOriginUrl);\r\n    } catch (error) {\r\n      console.log('Failed to connect to settings server:', error);\r\n      this.reconnect();\r\n    }\r\n  }\r\n\r\n  reconnect() {\r\n    if (!this.reconnectInterval) {\r\n      this.reconnectInterval = setInterval(() => {\r\n        this.connect();\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  async updateSetting(key, value) {\r\n    // Update local cache immediately\r\n    if (value === null) {\r\n      delete this.localCache[key];\r\n    } else {\r\n      this.localCache[key] = value;\r\n    }\r\n\r\n    // Try WebSocket first\r\n    if (this.isConnected && this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n      try {\r\n        this.ws.send(JSON.stringify({\r\n          type: 'settings_change',\r\n          key: key,\r\n          newValue: value\r\n        }));\r\n        return;\r\n      } catch (e) {\r\n        console.log('WebSocket send failed, using HTTP');\r\n      }\r\n    }\r\n\r\n    // Fallback to HTTP\r\n    this.pendingUpdates.set(key, value);\r\n    this.processPendingUpdates();\r\n  }\r\n\r\n  async processPendingUpdates() {\r\n    if (this.pendingUpdates.size === 0) return;\r\n\r\n    try {\r\n      const updates = Object.fromEntries(this.pendingUpdates);\r\n      const hostIP = window.location.hostname;\r\n      \r\n      const response = await fetch(`http://${hostIP}:8889/settings`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(updates)\r\n      });\r\n\r\n      if (response.ok) {\r\n        this.pendingUpdates.clear();\r\n      }\r\n    } catch (e) {\r\n      console.log('Failed to sync pending updates:', e);\r\n    }\r\n  }\r\n\r\n  addListener(callback) {\r\n    this.listeners.add(callback);\r\n  }\r\n\r\n  removeListener(callback) {\r\n    this.listeners.delete(callback);\r\n  }\r\n\r\n  notifyListeners() {\r\n    this.listeners.forEach(callback => {\r\n      try {\r\n        callback(this.localCache);\r\n      } catch (e) {\r\n        console.error('Listener error:', e);\r\n      }\r\n    });\r\n  }\r\n\r\n  getSetting(key) {\r\n    return this.localCache[key] || localStorage.getItem(key);\r\n  }\r\n\r\n  getAllSettings() {\r\n    return { ...this.localCache };\r\n  }\r\n}\r\n\r\n// Export singleton\r\nexport const globalSettings = new GlobalSettingsAPI();\r\n\r\n// Compatibility layer - override localStorage for seamless integration\r\nwindow.addEventListener('load', () => {\r\n  // Make sure all components use the global settings\r\n  globalSettings.addListener(() => {\r\n    // Dispatch storage events for existing components\r\n    window.dispatchEvent(new Event('storage'));\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}