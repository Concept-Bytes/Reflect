{"ast":null,"code":"// Simple WebSocket-based settings sync\nclass SettingsSync {\n  constructor() {\n    this.ws = null;\n    this.isHost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    this.reconnectInterval = null;\n    this.isApplyingRemote = false;\n    this.overrideLocalStorage();\n    this.init();\n  }\n  overrideLocalStorage() {\n    const originalSetItem = localStorage.setItem.bind(localStorage);\n    const originalRemoveItem = localStorage.removeItem.bind(localStorage);\n    const originalClear = localStorage.clear.bind(localStorage);\n    const dispatchLocalStorageEvent = (key, oldValue, newValue) => {\n      try {\n        window.dispatchEvent(new StorageEvent('storage', {\n          key,\n          oldValue,\n          newValue,\n          storageArea: localStorage,\n          url: window.location.href\n        }));\n      } catch (_) {\n        // no-op if StorageEvent cannot be constructed\n      }\n    };\n    localStorage.setItem = (key, value) => {\n      const oldValue = localStorage.getItem(key);\n      originalSetItem(key, value);\n      dispatchLocalStorageEvent(key, oldValue, value);\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key,\n          newValue: value,\n          oldValue\n        }));\n      }\n    };\n    localStorage.removeItem = key => {\n      const oldValue = localStorage.getItem(key);\n      originalRemoveItem(key);\n      dispatchLocalStorageEvent(key, oldValue, null);\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key,\n          newValue: null,\n          oldValue\n        }));\n      }\n    };\n    localStorage.clear = () => {\n      const keys = Object.keys(localStorage);\n      originalClear();\n      keys.forEach(key => dispatchLocalStorageEvent(key, null, null));\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        this.ws.send(JSON.stringify({\n          type: 'settings_clear'\n        }));\n      }\n    };\n  }\n  init() {\n    // Always connect: host will act as server peer as well\n    this.connect();\n\n    // Listen for localStorage changes\n    window.addEventListener('storage', e => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        // Broadcast any local change (from settings UI or other code)\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key: e.key,\n          newValue: e.newValue,\n          oldValue: e.oldValue\n        }));\n      }\n    });\n  }\n  connect() {\n    try {\n      // Prefer same-origin WS path (proxied by dev server) to avoid firewall issues\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n      const sameOriginUrl = `${protocol}://${window.location.host}/settings-sync`;\n      let connected = false;\n      const tryConnect = (url, onFail) => {\n        try {\n          const ws = new WebSocket(url);\n          ws.onopen = () => {\n            this.ws = ws;\n            connected = true;\n            console.log('Connected to settings sync:', url);\n            if (this.reconnectInterval) {\n              clearInterval(this.reconnectInterval);\n              this.reconnectInterval = null;\n            }\n            this.attachHandlers();\n          };\n          ws.onerror = () => {\n            ws.close();\n            if (onFail) onFail();\n          };\n        } catch (_) {\n          if (onFail) onFail();\n        }\n      };\n\n      // Fallback direct port 8889\n      const hostIP = window.location.hostname;\n      const directUrl = `${protocol}://${hostIP}:8889`;\n      tryConnect(sameOriginUrl, () => {\n        if (!connected) tryConnect(directUrl);\n      });\n\n      // Handlers are set after connection to reuse with fallback\n      // See attachHandlers\n    } catch (error) {\n      console.log('Failed to connect to settings sync:', error);\n      this.reconnect();\n    }\n  }\n  reconnect() {\n    if (!this.reconnectInterval) {\n      this.reconnectInterval = setInterval(() => {\n        this.connect();\n      }, 5000);\n    }\n  }\n  attachHandlers() {\n    if (!this.ws) return;\n    this.ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'settings_change') {\n        this.isApplyingRemote = true;\n        try {\n          if (data.newValue === null) {\n            localStorage.removeItem(data.key);\n          } else {\n            localStorage.setItem(data.key, data.newValue);\n          }\n        } finally {\n          this.isApplyingRemote = false;\n        }\n      } else if (data.type === 'settings_clear') {\n        this.isApplyingRemote = true;\n        try {\n          localStorage.clear();\n        } finally {\n          this.isApplyingRemote = false;\n        }\n      }\n    };\n    this.ws.onclose = () => {\n      console.log('Settings sync disconnected, attempting to reconnect...');\n      this.reconnect();\n    };\n    this.ws.onerror = () => {\n      this.reconnect();\n    };\n  }\n}\n\n// Export singleton instance\nexport const settingsSync = new SettingsSync();","map":{"version":3,"names":["SettingsSync","constructor","ws","isHost","window","location","hostname","reconnectInterval","isApplyingRemote","overrideLocalStorage","init","originalSetItem","localStorage","setItem","bind","originalRemoveItem","removeItem","originalClear","clear","dispatchLocalStorageEvent","key","oldValue","newValue","dispatchEvent","StorageEvent","storageArea","url","href","_","value","getItem","readyState","WebSocket","OPEN","send","JSON","stringify","type","keys","Object","forEach","connect","addEventListener","e","protocol","sameOriginUrl","host","connected","tryConnect","onFail","onopen","console","log","clearInterval","attachHandlers","onerror","close","hostIP","directUrl","error","reconnect","setInterval","onmessage","event","data","parse","onclose","settingsSync"],"sources":["C:/Users/Kcoda/Desktop/Projects/Reflect/src/utils/settingsSync.js"],"sourcesContent":["// Simple WebSocket-based settings sync\r\nclass SettingsSync {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.isHost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n    this.reconnectInterval = null;\r\n    this.isApplyingRemote = false;\r\n    this.overrideLocalStorage();\r\n    this.init();\r\n  }\r\n\r\n  overrideLocalStorage() {\r\n    const originalSetItem = localStorage.setItem.bind(localStorage);\r\n    const originalRemoveItem = localStorage.removeItem.bind(localStorage);\r\n    const originalClear = localStorage.clear.bind(localStorage);\r\n\r\n    const dispatchLocalStorageEvent = (key, oldValue, newValue) => {\r\n      try {\r\n        window.dispatchEvent(\r\n          new StorageEvent('storage', {\r\n            key,\r\n            oldValue,\r\n            newValue,\r\n            storageArea: localStorage,\r\n            url: window.location.href,\r\n          })\r\n        );\r\n      } catch (_) {\r\n        // no-op if StorageEvent cannot be constructed\r\n      }\r\n    };\r\n\r\n    localStorage.setItem = (key, value) => {\r\n      const oldValue = localStorage.getItem(key);\r\n      originalSetItem(key, value);\r\n      dispatchLocalStorageEvent(key, oldValue, value);\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        this.ws.send(\r\n          JSON.stringify({ type: 'settings_change', key, newValue: value, oldValue })\r\n        );\r\n      }\r\n    };\r\n\r\n    localStorage.removeItem = (key) => {\r\n      const oldValue = localStorage.getItem(key);\r\n      originalRemoveItem(key);\r\n      dispatchLocalStorageEvent(key, oldValue, null);\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        this.ws.send(\r\n          JSON.stringify({ type: 'settings_change', key, newValue: null, oldValue })\r\n        );\r\n      }\r\n    };\r\n\r\n    localStorage.clear = () => {\r\n      const keys = Object.keys(localStorage);\r\n      originalClear();\r\n      keys.forEach((key) => dispatchLocalStorageEvent(key, null, null));\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        this.ws.send(JSON.stringify({ type: 'settings_clear' }));\r\n      }\r\n    };\r\n  }\r\n\r\n  init() {\r\n    // Always connect: host will act as server peer as well\r\n    this.connect();\r\n    \r\n    // Listen for localStorage changes\r\n    window.addEventListener('storage', (e) => {\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        // Broadcast any local change (from settings UI or other code)\r\n        this.ws.send(JSON.stringify({\r\n          type: 'settings_change',\r\n          key: e.key,\r\n          newValue: e.newValue,\r\n          oldValue: e.oldValue\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  connect() {\r\n    try {\r\n      // Prefer same-origin WS path (proxied by dev server) to avoid firewall issues\r\n      const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\r\n      const sameOriginUrl = `${protocol}://${window.location.host}/settings-sync`;\r\n      let connected = false;\r\n\r\n      const tryConnect = (url, onFail) => {\r\n        try {\r\n          const ws = new WebSocket(url);\r\n          ws.onopen = () => {\r\n            this.ws = ws;\r\n            connected = true;\r\n            console.log('Connected to settings sync:', url);\r\n            if (this.reconnectInterval) {\r\n              clearInterval(this.reconnectInterval);\r\n              this.reconnectInterval = null;\r\n            }\r\n            this.attachHandlers();\r\n          };\r\n          ws.onerror = () => {\r\n            ws.close();\r\n            if (onFail) onFail();\r\n          };\r\n        } catch (_) {\r\n          if (onFail) onFail();\r\n        }\r\n      };\r\n\r\n      // Fallback direct port 8889\r\n      const hostIP = window.location.hostname;\r\n      const directUrl = `${protocol}://${hostIP}:8889`;\r\n\r\n      tryConnect(sameOriginUrl, () => {\r\n        if (!connected) tryConnect(directUrl);\r\n      });\r\n      \r\n      // Handlers are set after connection to reuse with fallback\r\n      // See attachHandlers\r\n    } catch (error) {\r\n      console.log('Failed to connect to settings sync:', error);\r\n      this.reconnect();\r\n    }\r\n  }\r\n\r\n  reconnect() {\r\n    if (!this.reconnectInterval) {\r\n      this.reconnectInterval = setInterval(() => {\r\n        this.connect();\r\n      }, 5000);\r\n    }\r\n  }\r\n\r\n  attachHandlers() {\r\n    if (!this.ws) return;\r\n    this.ws.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n      if (data.type === 'settings_change') {\r\n        this.isApplyingRemote = true;\r\n        try {\r\n          if (data.newValue === null) {\r\n            localStorage.removeItem(data.key);\r\n          } else {\r\n            localStorage.setItem(data.key, data.newValue);\r\n          }\r\n        } finally {\r\n          this.isApplyingRemote = false;\r\n        }\r\n      } else if (data.type === 'settings_clear') {\r\n        this.isApplyingRemote = true;\r\n        try {\r\n          localStorage.clear();\r\n        } finally {\r\n          this.isApplyingRemote = false;\r\n        }\r\n      }\r\n    };\r\n\r\n    this.ws.onclose = () => {\r\n      console.log('Settings sync disconnected, attempting to reconnect...');\r\n      this.reconnect();\r\n    };\r\n\r\n    this.ws.onerror = () => {\r\n      this.reconnect();\r\n    };\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const settingsSync = new SettingsSync();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}