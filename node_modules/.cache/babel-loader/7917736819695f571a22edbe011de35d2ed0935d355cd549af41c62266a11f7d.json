{"ast":null,"code":"// Simple WebSocket-based settings sync\nclass SettingsSync {\n  constructor() {\n    this.ws = null;\n    this.isHost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    this.reconnectInterval = null;\n    this.isApplyingRemote = false;\n    this.overrideLocalStorage();\n    this.init();\n  }\n  overrideLocalStorage() {\n    const originalSetItem = localStorage.setItem.bind(localStorage);\n    const originalRemoveItem = localStorage.removeItem.bind(localStorage);\n    const originalClear = localStorage.clear.bind(localStorage);\n    const dispatchLocalStorageEvent = (key, oldValue, newValue) => {\n      try {\n        window.dispatchEvent(new StorageEvent('storage', {\n          key,\n          oldValue,\n          newValue,\n          storageArea: localStorage,\n          url: window.location.href\n        }));\n      } catch (_) {\n        // no-op if StorageEvent cannot be constructed\n      }\n    };\n    localStorage.setItem = (key, value) => {\n      const oldValue = localStorage.getItem(key);\n      originalSetItem(key, value);\n      dispatchLocalStorageEvent(key, oldValue, value);\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key,\n          newValue: value,\n          oldValue\n        }));\n      }\n    };\n    localStorage.removeItem = key => {\n      const oldValue = localStorage.getItem(key);\n      originalRemoveItem(key);\n      dispatchLocalStorageEvent(key, oldValue, null);\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key,\n          newValue: null,\n          oldValue\n        }));\n      }\n    };\n    localStorage.clear = () => {\n      const keys = Object.keys(localStorage);\n      originalClear();\n      keys.forEach(key => dispatchLocalStorageEvent(key, null, null));\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        this.ws.send(JSON.stringify({\n          type: 'settings_clear'\n        }));\n      }\n    };\n  }\n  init() {\n    // Always connect: host will act as server peer as well\n    this.connect();\n\n    // Listen for localStorage changes\n    window.addEventListener('storage', e => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\n        // Broadcast any local change (from settings UI or other code)\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key: e.key,\n          newValue: e.newValue,\n          oldValue: e.oldValue\n        }));\n      }\n    });\n  }\n  connect() {\n    try {\n      // Always connect to the origin host where the UI is loaded from.\n      // For a controller device using http://HOST:8888, this points to HOST.\n      const hostIP = window.location.hostname;\n      this.ws = new WebSocket(`ws://${hostIP}:8889`);\n      this.ws.onopen = () => {\n        console.log('Connected to settings sync');\n        if (this.reconnectInterval) {\n          clearInterval(this.reconnectInterval);\n          this.reconnectInterval = null;\n        }\n      };\n      this.ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'settings_change') {\n          // Apply the change locally while suppressing re-broadcast\n          this.isApplyingRemote = true;\n          try {\n            if (data.newValue === null) {\n              localStorage.removeItem(data.key);\n            } else {\n              localStorage.setItem(data.key, data.newValue);\n            }\n          } finally {\n            this.isApplyingRemote = false;\n          }\n        } else if (data.type === 'settings_clear') {\n          this.isApplyingRemote = true;\n          try {\n            localStorage.clear();\n          } finally {\n            this.isApplyingRemote = false;\n          }\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('Settings sync disconnected, attempting to reconnect...');\n        this.reconnect();\n      };\n      this.ws.onerror = error => {\n        console.log('Settings sync error:', error);\n        this.reconnect();\n      };\n    } catch (error) {\n      console.log('Failed to connect to settings sync:', error);\n      this.reconnect();\n    }\n  }\n  reconnect() {\n    if (!this.reconnectInterval) {\n      this.reconnectInterval = setInterval(() => {\n        this.connect();\n      }, 5000);\n    }\n  }\n}\n\n// Export singleton instance\nexport const settingsSync = new SettingsSync();","map":{"version":3,"names":["SettingsSync","constructor","ws","isHost","window","location","hostname","reconnectInterval","isApplyingRemote","overrideLocalStorage","init","originalSetItem","localStorage","setItem","bind","originalRemoveItem","removeItem","originalClear","clear","dispatchLocalStorageEvent","key","oldValue","newValue","dispatchEvent","StorageEvent","storageArea","url","href","_","value","getItem","readyState","WebSocket","OPEN","send","JSON","stringify","type","keys","Object","forEach","connect","addEventListener","e","hostIP","onopen","console","log","clearInterval","onmessage","event","data","parse","onclose","reconnect","onerror","error","setInterval","settingsSync"],"sources":["C:/Users/Kcoda/Desktop/Projects/Reflect/src/utils/settingsSync.js"],"sourcesContent":["// Simple WebSocket-based settings sync\r\nclass SettingsSync {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.isHost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n    this.reconnectInterval = null;\r\n    this.isApplyingRemote = false;\r\n    this.overrideLocalStorage();\r\n    this.init();\r\n  }\r\n\r\n  overrideLocalStorage() {\r\n    const originalSetItem = localStorage.setItem.bind(localStorage);\r\n    const originalRemoveItem = localStorage.removeItem.bind(localStorage);\r\n    const originalClear = localStorage.clear.bind(localStorage);\r\n\r\n    const dispatchLocalStorageEvent = (key, oldValue, newValue) => {\r\n      try {\r\n        window.dispatchEvent(\r\n          new StorageEvent('storage', {\r\n            key,\r\n            oldValue,\r\n            newValue,\r\n            storageArea: localStorage,\r\n            url: window.location.href,\r\n          })\r\n        );\r\n      } catch (_) {\r\n        // no-op if StorageEvent cannot be constructed\r\n      }\r\n    };\r\n\r\n    localStorage.setItem = (key, value) => {\r\n      const oldValue = localStorage.getItem(key);\r\n      originalSetItem(key, value);\r\n      dispatchLocalStorageEvent(key, oldValue, value);\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        this.ws.send(\r\n          JSON.stringify({ type: 'settings_change', key, newValue: value, oldValue })\r\n        );\r\n      }\r\n    };\r\n\r\n    localStorage.removeItem = (key) => {\r\n      const oldValue = localStorage.getItem(key);\r\n      originalRemoveItem(key);\r\n      dispatchLocalStorageEvent(key, oldValue, null);\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        this.ws.send(\r\n          JSON.stringify({ type: 'settings_change', key, newValue: null, oldValue })\r\n        );\r\n      }\r\n    };\r\n\r\n    localStorage.clear = () => {\r\n      const keys = Object.keys(localStorage);\r\n      originalClear();\r\n      keys.forEach((key) => dispatchLocalStorageEvent(key, null, null));\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        this.ws.send(JSON.stringify({ type: 'settings_clear' }));\r\n      }\r\n    };\r\n  }\r\n\r\n  init() {\r\n    // Always connect: host will act as server peer as well\r\n    this.connect();\r\n    \r\n    // Listen for localStorage changes\r\n    window.addEventListener('storage', (e) => {\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN && !this.isApplyingRemote) {\r\n        // Broadcast any local change (from settings UI or other code)\r\n        this.ws.send(JSON.stringify({\r\n          type: 'settings_change',\r\n          key: e.key,\r\n          newValue: e.newValue,\r\n          oldValue: e.oldValue\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  connect() {\r\n    try {\r\n      // Always connect to the origin host where the UI is loaded from.\r\n      // For a controller device using http://HOST:8888, this points to HOST.\r\n      const hostIP = window.location.hostname;\r\n      this.ws = new WebSocket(`ws://${hostIP}:8889`);\r\n      \r\n      this.ws.onopen = () => {\r\n        console.log('Connected to settings sync');\r\n        if (this.reconnectInterval) {\r\n          clearInterval(this.reconnectInterval);\r\n          this.reconnectInterval = null;\r\n        }\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        if (data.type === 'settings_change') {\r\n          // Apply the change locally while suppressing re-broadcast\r\n          this.isApplyingRemote = true;\r\n          try {\r\n            if (data.newValue === null) {\r\n              localStorage.removeItem(data.key);\r\n            } else {\r\n              localStorage.setItem(data.key, data.newValue);\r\n            }\r\n          } finally {\r\n            this.isApplyingRemote = false;\r\n          }\r\n        } else if (data.type === 'settings_clear') {\r\n          this.isApplyingRemote = true;\r\n          try {\r\n            localStorage.clear();\r\n          } finally {\r\n            this.isApplyingRemote = false;\r\n          }\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        console.log('Settings sync disconnected, attempting to reconnect...');\r\n        this.reconnect();\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.log('Settings sync error:', error);\r\n        this.reconnect();\r\n      };\r\n    } catch (error) {\r\n      console.log('Failed to connect to settings sync:', error);\r\n      this.reconnect();\r\n    }\r\n  }\r\n\r\n  reconnect() {\r\n    if (!this.reconnectInterval) {\r\n      this.reconnectInterval = setInterval(() => {\r\n        this.connect();\r\n      }, 5000);\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const settingsSync = new SettingsSync();\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,CAAC;EACjBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,EAAE,GAAG,IAAI;IACd,IAAI,CAACC,MAAM,GAAGC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,IAAIF,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW;IAClG,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,gBAAgB,GAAG,KAAK;IAC7B,IAAI,CAACC,oBAAoB,CAAC,CAAC;IAC3B,IAAI,CAACC,IAAI,CAAC,CAAC;EACb;EAEAD,oBAAoBA,CAAA,EAAG;IACrB,MAAME,eAAe,GAAGC,YAAY,CAACC,OAAO,CAACC,IAAI,CAACF,YAAY,CAAC;IAC/D,MAAMG,kBAAkB,GAAGH,YAAY,CAACI,UAAU,CAACF,IAAI,CAACF,YAAY,CAAC;IACrE,MAAMK,aAAa,GAAGL,YAAY,CAACM,KAAK,CAACJ,IAAI,CAACF,YAAY,CAAC;IAE3D,MAAMO,yBAAyB,GAAGA,CAACC,GAAG,EAAEC,QAAQ,EAAEC,QAAQ,KAAK;MAC7D,IAAI;QACFlB,MAAM,CAACmB,aAAa,CAClB,IAAIC,YAAY,CAAC,SAAS,EAAE;UAC1BJ,GAAG;UACHC,QAAQ;UACRC,QAAQ;UACRG,WAAW,EAAEb,YAAY;UACzBc,GAAG,EAAEtB,MAAM,CAACC,QAAQ,CAACsB;QACvB,CAAC,CACH,CAAC;MACH,CAAC,CAAC,OAAOC,CAAC,EAAE;QACV;MAAA;IAEJ,CAAC;IAEDhB,YAAY,CAACC,OAAO,GAAG,CAACO,GAAG,EAAES,KAAK,KAAK;MACrC,MAAMR,QAAQ,GAAGT,YAAY,CAACkB,OAAO,CAACV,GAAG,CAAC;MAC1CT,eAAe,CAACS,GAAG,EAAES,KAAK,CAAC;MAC3BV,yBAAyB,CAACC,GAAG,EAAEC,QAAQ,EAAEQ,KAAK,CAAC;MAC/C,IAAI,IAAI,CAAC3B,EAAE,IAAI,IAAI,CAACA,EAAE,CAAC6B,UAAU,KAAKC,SAAS,CAACC,IAAI,IAAI,CAAC,IAAI,CAACzB,gBAAgB,EAAE;QAC9E,IAAI,CAACN,EAAE,CAACgC,IAAI,CACVC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAE,iBAAiB;UAAEjB,GAAG;UAAEE,QAAQ,EAAEO,KAAK;UAAER;QAAS,CAAC,CAC5E,CAAC;MACH;IACF,CAAC;IAEDT,YAAY,CAACI,UAAU,GAAII,GAAG,IAAK;MACjC,MAAMC,QAAQ,GAAGT,YAAY,CAACkB,OAAO,CAACV,GAAG,CAAC;MAC1CL,kBAAkB,CAACK,GAAG,CAAC;MACvBD,yBAAyB,CAACC,GAAG,EAAEC,QAAQ,EAAE,IAAI,CAAC;MAC9C,IAAI,IAAI,CAACnB,EAAE,IAAI,IAAI,CAACA,EAAE,CAAC6B,UAAU,KAAKC,SAAS,CAACC,IAAI,IAAI,CAAC,IAAI,CAACzB,gBAAgB,EAAE;QAC9E,IAAI,CAACN,EAAE,CAACgC,IAAI,CACVC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAE,iBAAiB;UAAEjB,GAAG;UAAEE,QAAQ,EAAE,IAAI;UAAED;QAAS,CAAC,CAC3E,CAAC;MACH;IACF,CAAC;IAEDT,YAAY,CAACM,KAAK,GAAG,MAAM;MACzB,MAAMoB,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC1B,YAAY,CAAC;MACtCK,aAAa,CAAC,CAAC;MACfqB,IAAI,CAACE,OAAO,CAAEpB,GAAG,IAAKD,yBAAyB,CAACC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;MACjE,IAAI,IAAI,CAAClB,EAAE,IAAI,IAAI,CAACA,EAAE,CAAC6B,UAAU,KAAKC,SAAS,CAACC,IAAI,IAAI,CAAC,IAAI,CAACzB,gBAAgB,EAAE;QAC9E,IAAI,CAACN,EAAE,CAACgC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAAEC,IAAI,EAAE;QAAiB,CAAC,CAAC,CAAC;MAC1D;IACF,CAAC;EACH;EAEA3B,IAAIA,CAAA,EAAG;IACL;IACA,IAAI,CAAC+B,OAAO,CAAC,CAAC;;IAEd;IACArC,MAAM,CAACsC,gBAAgB,CAAC,SAAS,EAAGC,CAAC,IAAK;MACxC,IAAI,IAAI,CAACzC,EAAE,IAAI,IAAI,CAACA,EAAE,CAAC6B,UAAU,KAAKC,SAAS,CAACC,IAAI,IAAI,CAAC,IAAI,CAACzB,gBAAgB,EAAE;QAC9E;QACA,IAAI,CAACN,EAAE,CAACgC,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;UAC1BC,IAAI,EAAE,iBAAiB;UACvBjB,GAAG,EAAEuB,CAAC,CAACvB,GAAG;UACVE,QAAQ,EAAEqB,CAAC,CAACrB,QAAQ;UACpBD,QAAQ,EAAEsB,CAAC,CAACtB;QACd,CAAC,CAAC,CAAC;MACL;IACF,CAAC,CAAC;EACJ;EAEAoB,OAAOA,CAAA,EAAG;IACR,IAAI;MACF;MACA;MACA,MAAMG,MAAM,GAAGxC,MAAM,CAACC,QAAQ,CAACC,QAAQ;MACvC,IAAI,CAACJ,EAAE,GAAG,IAAI8B,SAAS,CAAC,QAAQY,MAAM,OAAO,CAAC;MAE9C,IAAI,CAAC1C,EAAE,CAAC2C,MAAM,GAAG,MAAM;QACrBC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QACzC,IAAI,IAAI,CAACxC,iBAAiB,EAAE;UAC1ByC,aAAa,CAAC,IAAI,CAACzC,iBAAiB,CAAC;UACrC,IAAI,CAACA,iBAAiB,GAAG,IAAI;QAC/B;MACF,CAAC;MAED,IAAI,CAACL,EAAE,CAAC+C,SAAS,GAAIC,KAAK,IAAK;QAC7B,MAAMC,IAAI,GAAGhB,IAAI,CAACiB,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;QACnC,IAAIA,IAAI,CAACd,IAAI,KAAK,iBAAiB,EAAE;UACnC;UACA,IAAI,CAAC7B,gBAAgB,GAAG,IAAI;UAC5B,IAAI;YACF,IAAI2C,IAAI,CAAC7B,QAAQ,KAAK,IAAI,EAAE;cAC1BV,YAAY,CAACI,UAAU,CAACmC,IAAI,CAAC/B,GAAG,CAAC;YACnC,CAAC,MAAM;cACLR,YAAY,CAACC,OAAO,CAACsC,IAAI,CAAC/B,GAAG,EAAE+B,IAAI,CAAC7B,QAAQ,CAAC;YAC/C;UACF,CAAC,SAAS;YACR,IAAI,CAACd,gBAAgB,GAAG,KAAK;UAC/B;QACF,CAAC,MAAM,IAAI2C,IAAI,CAACd,IAAI,KAAK,gBAAgB,EAAE;UACzC,IAAI,CAAC7B,gBAAgB,GAAG,IAAI;UAC5B,IAAI;YACFI,YAAY,CAACM,KAAK,CAAC,CAAC;UACtB,CAAC,SAAS;YACR,IAAI,CAACV,gBAAgB,GAAG,KAAK;UAC/B;QACF;MACF,CAAC;MAED,IAAI,CAACN,EAAE,CAACmD,OAAO,GAAG,MAAM;QACtBP,OAAO,CAACC,GAAG,CAAC,wDAAwD,CAAC;QACrE,IAAI,CAACO,SAAS,CAAC,CAAC;MAClB,CAAC;MAED,IAAI,CAACpD,EAAE,CAACqD,OAAO,GAAIC,KAAK,IAAK;QAC3BV,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAES,KAAK,CAAC;QAC1C,IAAI,CAACF,SAAS,CAAC,CAAC;MAClB,CAAC;IACH,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdV,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAES,KAAK,CAAC;MACzD,IAAI,CAACF,SAAS,CAAC,CAAC;IAClB;EACF;EAEAA,SAASA,CAAA,EAAG;IACV,IAAI,CAAC,IAAI,CAAC/C,iBAAiB,EAAE;MAC3B,IAAI,CAACA,iBAAiB,GAAGkD,WAAW,CAAC,MAAM;QACzC,IAAI,CAAChB,OAAO,CAAC,CAAC;MAChB,CAAC,EAAE,IAAI,CAAC;IACV;EACF;AACF;;AAEA;AACA,OAAO,MAAMiB,YAAY,GAAG,IAAI1D,YAAY,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}