{"ast":null,"code":"export const apps = [{\n  id: 'clock',\n  name: 'Clock',\n  description: 'Digital clock with customizable format',\n  componentPath: 'ClockApp',\n  enabled: true,\n  defaultPosition: {\n    x: 50,\n    y: 50\n  },\n  defaultSize: {\n    width: 300,\n    height: 120\n  },\n  settings: {\n    format24h: false,\n    showSeconds: true,\n    fontSize: 'large'\n  }\n}, {\n  id: 'date',\n  name: 'Date',\n  description: 'Current date display',\n  componentPath: 'DateApp',\n  enabled: true,\n  defaultPosition: {\n    x: 50,\n    y: 200\n  },\n  defaultSize: {\n    width: 250,\n    height: 80\n  },\n  settings: {\n    format: 'long',\n    // 'short', 'medium', 'long'\n    showYear: true\n  }\n}, {\n  id: 'weather',\n  name: 'Weather',\n  description: 'Current weather conditions',\n  componentPath: 'WeatherApp',\n  enabled: true,\n  defaultPosition: {\n    x: 400,\n    y: 50\n  },\n  defaultSize: {\n    width: 320,\n    height: 200\n  },\n  settings: {\n    location: '',\n    units: 'fahrenheit',\n    // 'celsius', 'fahrenheit'\n    showDetails: true\n  }\n}, {\n  id: 'news',\n  name: 'News',\n  description: 'Latest news headlines',\n  componentPath: 'NewsApp',\n  enabled: true,\n  defaultPosition: {\n    x: 50,\n    y: 400\n  },\n  defaultSize: {\n    width: 400,\n    height: 250\n  },\n  settings: {\n    source: 'general',\n    maxItems: 5,\n    refreshInterval: 300000 // 5 minutes\n  }\n}, {\n  id: 'spotify',\n  name: 'Spotify',\n  description: 'Currently playing track',\n  componentPath: 'SpotifyApp',\n  enabled: false,\n  defaultPosition: {\n    x: 750,\n    y: 400\n  },\n  defaultSize: {\n    width: 280,\n    height: 260\n  },\n  settings: {\n    clientId: '',\n    clientSecret: '',\n    redirectUri: `${window.location.origin}/callback`\n  }\n}, {\n  id: 'handtracking',\n  name: 'Hand Tracking',\n  description: 'Camera-based hand tracking with cursor control',\n  componentPath: 'HandTrackingApp',\n  enabled: false,\n  isBackgroundService: true,\n  // This app runs in background, not displayed as widget\n  defaultPosition: {\n    x: 800,\n    y: 50\n  },\n  defaultSize: {\n    width: 350,\n    height: 300\n  },\n  settings: {\n    enabled: false,\n    showPreview: false,\n    sensitivity: 1.0,\n    smoothing: 0.8,\n    pinchSensitivity: 0.2 // Default 20% (0.0-1.0 range)\n  }\n}];\n\n// Helper to get settings from either localStorage or global settings API\nconst getSettings = () => {\n  // Try to import global settings, but fallback to localStorage if not available\n  try {\n    const {\n      globalSettings\n    } = require('../utils/globalSettings');\n    return JSON.parse(globalSettings.getSetting('smartMirrorSettings') || '{}');\n  } catch (e) {\n    return JSON.parse(localStorage.getItem('smartMirrorSettings') || '{}');\n  }\n};\n\n// Helper to save settings to both localStorage and global settings API\nconst saveSettings = settings => {\n  const settingsJson = JSON.stringify(settings);\n  localStorage.setItem('smartMirrorSettings', settingsJson);\n\n  // Also save to global settings if available\n  try {\n    const {\n      globalSettings\n    } = require('../utils/globalSettings');\n    globalSettings.updateSetting('smartMirrorSettings', settingsJson);\n  } catch (e) {\n    // Fallback to localStorage only\n  }\n};\nexport const getEnabledApps = () => {\n  const settings = getSettings();\n  return apps.filter(app => {\n    var _settings$app$id;\n    return ((_settings$app$id = settings[app.id]) === null || _settings$app$id === void 0 ? void 0 : _settings$app$id.enabled) !== false;\n  });\n};\nexport const getAppSettings = appId => {\n  var _settings$appId;\n  const settings = getSettings();\n  const app = apps.find(a => a.id === appId);\n  return {\n    ...(app === null || app === void 0 ? void 0 : app.settings),\n    ...((_settings$appId = settings[appId]) === null || _settings$appId === void 0 ? void 0 : _settings$appId.settings)\n  };\n};\nexport const saveAppSettings = (appId, newSettings) => {\n  const settings = getSettings();\n  if (!settings[appId]) {\n    settings[appId] = {};\n  }\n  settings[appId].settings = {\n    ...settings[appId].settings,\n    ...newSettings\n  };\n  saveSettings(settings);\n};\nexport const toggleAppEnabled = (appId, enabled) => {\n  const settings = getSettings();\n  if (!settings[appId]) {\n    settings[appId] = {};\n  }\n  settings[appId].enabled = enabled;\n  saveSettings(settings);\n};","map":{"version":3,"names":["apps","id","name","description","componentPath","enabled","defaultPosition","x","y","defaultSize","width","height","settings","format24h","showSeconds","fontSize","format","showYear","location","units","showDetails","source","maxItems","refreshInterval","clientId","clientSecret","redirectUri","window","origin","isBackgroundService","showPreview","sensitivity","smoothing","pinchSensitivity","getSettings","globalSettings","require","JSON","parse","getSetting","e","localStorage","getItem","saveSettings","settingsJson","stringify","setItem","updateSetting","getEnabledApps","filter","app","_settings$app$id","getAppSettings","appId","_settings$appId","find","a","saveAppSettings","newSettings","toggleAppEnabled"],"sources":["C:/Users/Kcoda/Desktop/Projects/Reflect/src/data/apps.js"],"sourcesContent":["export const apps = [\r\n  {\r\n    id: 'clock',\r\n    name: 'Clock',\r\n    description: 'Digital clock with customizable format',\r\n    componentPath: 'ClockApp',\r\n    enabled: true,\r\n    defaultPosition: { x: 50, y: 50 },\r\n    defaultSize: { width: 300, height: 120 },\r\n    settings: {\r\n      format24h: false,\r\n      showSeconds: true,\r\n      fontSize: 'large'\r\n    }\r\n  },\r\n  {\r\n    id: 'date',\r\n    name: 'Date',\r\n    description: 'Current date display',\r\n    componentPath: 'DateApp',\r\n    enabled: true,\r\n    defaultPosition: { x: 50, y: 200 },\r\n    defaultSize: { width: 250, height: 80 },\r\n    settings: {\r\n      format: 'long', // 'short', 'medium', 'long'\r\n      showYear: true\r\n    }\r\n  },\r\n  {\r\n    id: 'weather',\r\n    name: 'Weather',\r\n    description: 'Current weather conditions',\r\n    componentPath: 'WeatherApp',\r\n    enabled: true,\r\n    defaultPosition: { x: 400, y: 50 },\r\n    defaultSize: { width: 320, height: 200 },\r\n    settings: {\r\n      location: '',\r\n      units: 'fahrenheit', // 'celsius', 'fahrenheit'\r\n      showDetails: true\r\n    }\r\n  },\r\n  {\r\n    id: 'news',\r\n    name: 'News',\r\n    description: 'Latest news headlines',\r\n    componentPath: 'NewsApp',\r\n    enabled: true,\r\n    defaultPosition: { x: 50, y: 400 },\r\n    defaultSize: { width: 400, height: 250 },\r\n    settings: {\r\n      source: 'general',\r\n      maxItems: 5,\r\n      refreshInterval: 300000 // 5 minutes\r\n    }\r\n  },\r\n  {\r\n    id: 'spotify',\r\n    name: 'Spotify',\r\n    description: 'Currently playing track',\r\n    componentPath: 'SpotifyApp',\r\n    enabled: false,\r\n    defaultPosition: { x: 750, y: 400 },\r\n    defaultSize: { width: 280, height: 260 },\r\n    settings: {\r\n      clientId: '',\r\n      clientSecret: '',\r\n      redirectUri: `${window.location.origin}/callback`\r\n    }\r\n  },\r\n  {\r\n    id: 'handtracking',\r\n    name: 'Hand Tracking',\r\n    description: 'Camera-based hand tracking with cursor control',\r\n    componentPath: 'HandTrackingApp',\r\n    enabled: false,\r\n    isBackgroundService: true, // This app runs in background, not displayed as widget\r\n    defaultPosition: { x: 800, y: 50 },\r\n    defaultSize: { width: 350, height: 300 },\r\n    settings: {\r\n      enabled: false,\r\n      showPreview: false,\r\n      sensitivity: 1.0,\r\n      smoothing: 0.8,\r\n      pinchSensitivity: 0.2 // Default 20% (0.0-1.0 range)\r\n    }\r\n  }\r\n];\r\n\r\n// Helper to get settings from either localStorage or global settings API\r\nconst getSettings = () => {\r\n  // Try to import global settings, but fallback to localStorage if not available\r\n  try {\r\n    const { globalSettings } = require('../utils/globalSettings');\r\n    return JSON.parse(globalSettings.getSetting('smartMirrorSettings') || '{}');\r\n  } catch (e) {\r\n    return JSON.parse(localStorage.getItem('smartMirrorSettings') || '{}');\r\n  }\r\n};\r\n\r\n// Helper to save settings to both localStorage and global settings API\r\nconst saveSettings = (settings) => {\r\n  const settingsJson = JSON.stringify(settings);\r\n  localStorage.setItem('smartMirrorSettings', settingsJson);\r\n  \r\n  // Also save to global settings if available\r\n  try {\r\n    const { globalSettings } = require('../utils/globalSettings');\r\n    globalSettings.updateSetting('smartMirrorSettings', settingsJson);\r\n  } catch (e) {\r\n    // Fallback to localStorage only\r\n  }\r\n};\r\n\r\nexport const getEnabledApps = () => {\r\n  const settings = getSettings();\r\n  return apps.filter(app => settings[app.id]?.enabled !== false);\r\n};\r\n\r\nexport const getAppSettings = (appId) => {\r\n  const settings = getSettings();\r\n  const app = apps.find(a => a.id === appId);\r\n  return {\r\n    ...app?.settings,\r\n    ...settings[appId]?.settings\r\n  };\r\n};\r\n\r\nexport const saveAppSettings = (appId, newSettings) => {\r\n  const settings = getSettings();\r\n  if (!settings[appId]) {\r\n    settings[appId] = {};\r\n  }\r\n  settings[appId].settings = { ...settings[appId].settings, ...newSettings };\r\n  saveSettings(settings);\r\n};\r\n\r\nexport const toggleAppEnabled = (appId, enabled) => {\r\n  const settings = getSettings();\r\n  if (!settings[appId]) {\r\n    settings[appId] = {};\r\n  }\r\n  settings[appId].enabled = enabled;\r\n  saveSettings(settings);\r\n};\r\n"],"mappings":"AAAA,OAAO,MAAMA,IAAI,GAAG,CAClB;EACEC,EAAE,EAAE,OAAO;EACXC,IAAI,EAAE,OAAO;EACbC,WAAW,EAAE,wCAAwC;EACrDC,aAAa,EAAE,UAAU;EACzBC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE;IAAEC,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE;EAAG,CAAC;EACjCC,WAAW,EAAE;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EACxCC,QAAQ,EAAE;IACRC,SAAS,EAAE,KAAK;IAChBC,WAAW,EAAE,IAAI;IACjBC,QAAQ,EAAE;EACZ;AACF,CAAC,EACD;EACEd,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,sBAAsB;EACnCC,aAAa,EAAE,SAAS;EACxBC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE;IAAEC,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE;EAAI,CAAC;EAClCC,WAAW,EAAE;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAG,CAAC;EACvCC,QAAQ,EAAE;IACRI,MAAM,EAAE,MAAM;IAAE;IAChBC,QAAQ,EAAE;EACZ;AACF,CAAC,EACD;EACEhB,EAAE,EAAE,SAAS;EACbC,IAAI,EAAE,SAAS;EACfC,WAAW,EAAE,4BAA4B;EACzCC,aAAa,EAAE,YAAY;EAC3BC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAG,CAAC;EAClCC,WAAW,EAAE;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EACxCC,QAAQ,EAAE;IACRM,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,YAAY;IAAE;IACrBC,WAAW,EAAE;EACf;AACF,CAAC,EACD;EACEnB,EAAE,EAAE,MAAM;EACVC,IAAI,EAAE,MAAM;EACZC,WAAW,EAAE,uBAAuB;EACpCC,aAAa,EAAE,SAAS;EACxBC,OAAO,EAAE,IAAI;EACbC,eAAe,EAAE;IAAEC,CAAC,EAAE,EAAE;IAAEC,CAAC,EAAE;EAAI,CAAC;EAClCC,WAAW,EAAE;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EACxCC,QAAQ,EAAE;IACRS,MAAM,EAAE,SAAS;IACjBC,QAAQ,EAAE,CAAC;IACXC,eAAe,EAAE,MAAM,CAAC;EAC1B;AACF,CAAC,EACD;EACEtB,EAAE,EAAE,SAAS;EACbC,IAAI,EAAE,SAAS;EACfC,WAAW,EAAE,yBAAyB;EACtCC,aAAa,EAAE,YAAY;EAC3BC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAI,CAAC;EACnCC,WAAW,EAAE;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EACxCC,QAAQ,EAAE;IACRY,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,EAAE;IAChBC,WAAW,EAAE,GAAGC,MAAM,CAACT,QAAQ,CAACU,MAAM;EACxC;AACF,CAAC,EACD;EACE3B,EAAE,EAAE,cAAc;EAClBC,IAAI,EAAE,eAAe;EACrBC,WAAW,EAAE,gDAAgD;EAC7DC,aAAa,EAAE,iBAAiB;EAChCC,OAAO,EAAE,KAAK;EACdwB,mBAAmB,EAAE,IAAI;EAAE;EAC3BvB,eAAe,EAAE;IAAEC,CAAC,EAAE,GAAG;IAAEC,CAAC,EAAE;EAAG,CAAC;EAClCC,WAAW,EAAE;IAAEC,KAAK,EAAE,GAAG;IAAEC,MAAM,EAAE;EAAI,CAAC;EACxCC,QAAQ,EAAE;IACRP,OAAO,EAAE,KAAK;IACdyB,WAAW,EAAE,KAAK;IAClBC,WAAW,EAAE,GAAG;IAChBC,SAAS,EAAE,GAAG;IACdC,gBAAgB,EAAE,GAAG,CAAC;EACxB;AACF,CAAC,CACF;;AAED;AACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EACxB;EACA,IAAI;IACF,MAAM;MAAEC;IAAe,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;IAC7D,OAAOC,IAAI,CAACC,KAAK,CAACH,cAAc,CAACI,UAAU,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC;EAC7E,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAOH,IAAI,CAACC,KAAK,CAACG,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,IAAI,IAAI,CAAC;EACxE;AACF,CAAC;;AAED;AACA,MAAMC,YAAY,GAAI/B,QAAQ,IAAK;EACjC,MAAMgC,YAAY,GAAGP,IAAI,CAACQ,SAAS,CAACjC,QAAQ,CAAC;EAC7C6B,YAAY,CAACK,OAAO,CAAC,qBAAqB,EAAEF,YAAY,CAAC;;EAEzD;EACA,IAAI;IACF,MAAM;MAAET;IAAe,CAAC,GAAGC,OAAO,CAAC,yBAAyB,CAAC;IAC7DD,cAAc,CAACY,aAAa,CAAC,qBAAqB,EAAEH,YAAY,CAAC;EACnE,CAAC,CAAC,OAAOJ,CAAC,EAAE;IACV;EAAA;AAEJ,CAAC;AAED,OAAO,MAAMQ,cAAc,GAAGA,CAAA,KAAM;EAClC,MAAMpC,QAAQ,GAAGsB,WAAW,CAAC,CAAC;EAC9B,OAAOlC,IAAI,CAACiD,MAAM,CAACC,GAAG;IAAA,IAAAC,gBAAA;IAAA,OAAI,EAAAA,gBAAA,GAAAvC,QAAQ,CAACsC,GAAG,CAACjD,EAAE,CAAC,cAAAkD,gBAAA,uBAAhBA,gBAAA,CAAkB9C,OAAO,MAAK,KAAK;EAAA,EAAC;AAChE,CAAC;AAED,OAAO,MAAM+C,cAAc,GAAIC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACvC,MAAM1C,QAAQ,GAAGsB,WAAW,CAAC,CAAC;EAC9B,MAAMgB,GAAG,GAAGlD,IAAI,CAACuD,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvD,EAAE,KAAKoD,KAAK,CAAC;EAC1C,OAAO;IACL,IAAGH,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEtC,QAAQ;IAChB,KAAA0C,eAAA,GAAG1C,QAAQ,CAACyC,KAAK,CAAC,cAAAC,eAAA,uBAAfA,eAAA,CAAiB1C,QAAQ;EAC9B,CAAC;AACH,CAAC;AAED,OAAO,MAAM6C,eAAe,GAAGA,CAACJ,KAAK,EAAEK,WAAW,KAAK;EACrD,MAAM9C,QAAQ,GAAGsB,WAAW,CAAC,CAAC;EAC9B,IAAI,CAACtB,QAAQ,CAACyC,KAAK,CAAC,EAAE;IACpBzC,QAAQ,CAACyC,KAAK,CAAC,GAAG,CAAC,CAAC;EACtB;EACAzC,QAAQ,CAACyC,KAAK,CAAC,CAACzC,QAAQ,GAAG;IAAE,GAAGA,QAAQ,CAACyC,KAAK,CAAC,CAACzC,QAAQ;IAAE,GAAG8C;EAAY,CAAC;EAC1Ef,YAAY,CAAC/B,QAAQ,CAAC;AACxB,CAAC;AAED,OAAO,MAAM+C,gBAAgB,GAAGA,CAACN,KAAK,EAAEhD,OAAO,KAAK;EAClD,MAAMO,QAAQ,GAAGsB,WAAW,CAAC,CAAC;EAC9B,IAAI,CAACtB,QAAQ,CAACyC,KAAK,CAAC,EAAE;IACpBzC,QAAQ,CAACyC,KAAK,CAAC,GAAG,CAAC,CAAC;EACtB;EACAzC,QAAQ,CAACyC,KAAK,CAAC,CAAChD,OAAO,GAAGA,OAAO;EACjCsC,YAAY,CAAC/B,QAAQ,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}