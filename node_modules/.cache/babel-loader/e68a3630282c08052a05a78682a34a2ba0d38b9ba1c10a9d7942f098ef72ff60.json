{"ast":null,"code":"// Simple WebSocket-based settings sync\nclass SettingsSync {\n  constructor() {\n    this.ws = null;\n    this.isHost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\n    this.reconnectInterval = null;\n    this.init();\n  }\n  init() {\n    // Always connect: host will act as server peer as well\n    this.connect();\n\n    // Listen for localStorage changes\n    window.addEventListener('storage', e => {\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n        // Broadcast any local change (from settings UI or other code)\n        this.ws.send(JSON.stringify({\n          type: 'settings_change',\n          key: e.key,\n          newValue: e.newValue,\n          oldValue: e.oldValue\n        }));\n      }\n    });\n  }\n  connect() {\n    try {\n      // Always connect to the origin host where the UI is loaded from.\n      // For a controller device using http://HOST:8888, this points to HOST.\n      const hostIP = window.location.hostname;\n      this.ws = new WebSocket(`ws://${hostIP}:8889`);\n      this.ws.onopen = () => {\n        console.log('Connected to settings sync');\n        if (this.reconnectInterval) {\n          clearInterval(this.reconnectInterval);\n          this.reconnectInterval = null;\n        }\n      };\n      this.ws.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.type === 'settings_change') {\n          // Apply the change locally without triggering another event\n          if (data.newValue === null) {\n            localStorage.removeItem(data.key);\n          } else {\n            localStorage.setItem(data.key, data.newValue);\n          }\n\n          // Manually dispatch storage event for local updates\n          window.dispatchEvent(new StorageEvent('storage', {\n            key: data.key,\n            newValue: data.newValue,\n            oldValue: data.oldValue,\n            storageArea: localStorage\n          }));\n        }\n      };\n      this.ws.onclose = () => {\n        console.log('Settings sync disconnected, attempting to reconnect...');\n        this.reconnect();\n      };\n      this.ws.onerror = error => {\n        console.log('Settings sync error:', error);\n        this.reconnect();\n      };\n    } catch (error) {\n      console.log('Failed to connect to settings sync:', error);\n      this.reconnect();\n    }\n  }\n  reconnect() {\n    if (!this.reconnectInterval) {\n      this.reconnectInterval = setInterval(() => {\n        this.connect();\n      }, 5000);\n    }\n  }\n}\n\n// Export singleton instance\nexport const settingsSync = new SettingsSync();","map":{"version":3,"names":["SettingsSync","constructor","ws","isHost","window","location","hostname","reconnectInterval","init","connect","addEventListener","e","readyState","WebSocket","OPEN","send","JSON","stringify","type","key","newValue","oldValue","hostIP","onopen","console","log","clearInterval","onmessage","event","data","parse","localStorage","removeItem","setItem","dispatchEvent","StorageEvent","storageArea","onclose","reconnect","onerror","error","setInterval","settingsSync"],"sources":["C:/Users/Kcoda/Desktop/Projects/Reflect/src/utils/settingsSync.js"],"sourcesContent":["// Simple WebSocket-based settings sync\r\nclass SettingsSync {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.isHost = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';\r\n    this.reconnectInterval = null;\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    // Always connect: host will act as server peer as well\r\n    this.connect();\r\n    \r\n    // Listen for localStorage changes\r\n    window.addEventListener('storage', (e) => {\r\n      if (this.ws && this.ws.readyState === WebSocket.OPEN) {\r\n        // Broadcast any local change (from settings UI or other code)\r\n        this.ws.send(JSON.stringify({\r\n          type: 'settings_change',\r\n          key: e.key,\r\n          newValue: e.newValue,\r\n          oldValue: e.oldValue\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  connect() {\r\n    try {\r\n      // Always connect to the origin host where the UI is loaded from.\r\n      // For a controller device using http://HOST:8888, this points to HOST.\r\n      const hostIP = window.location.hostname;\r\n      this.ws = new WebSocket(`ws://${hostIP}:8889`);\r\n      \r\n      this.ws.onopen = () => {\r\n        console.log('Connected to settings sync');\r\n        if (this.reconnectInterval) {\r\n          clearInterval(this.reconnectInterval);\r\n          this.reconnectInterval = null;\r\n        }\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        const data = JSON.parse(event.data);\r\n        if (data.type === 'settings_change') {\r\n          // Apply the change locally without triggering another event\r\n          if (data.newValue === null) {\r\n            localStorage.removeItem(data.key);\r\n          } else {\r\n            localStorage.setItem(data.key, data.newValue);\r\n          }\r\n          \r\n          // Manually dispatch storage event for local updates\r\n          window.dispatchEvent(new StorageEvent('storage', {\r\n            key: data.key,\r\n            newValue: data.newValue,\r\n            oldValue: data.oldValue,\r\n            storageArea: localStorage\r\n          }));\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        console.log('Settings sync disconnected, attempting to reconnect...');\r\n        this.reconnect();\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.log('Settings sync error:', error);\r\n        this.reconnect();\r\n      };\r\n    } catch (error) {\r\n      console.log('Failed to connect to settings sync:', error);\r\n      this.reconnect();\r\n    }\r\n  }\r\n\r\n  reconnect() {\r\n    if (!this.reconnectInterval) {\r\n      this.reconnectInterval = setInterval(() => {\r\n        this.connect();\r\n      }, 5000);\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const settingsSync = new SettingsSync();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}